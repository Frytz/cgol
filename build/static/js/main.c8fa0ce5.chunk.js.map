{"version":3,"sources":["logo.svg","components/Main/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BodyDiv","styled","div","HeaderDiv","Title","ButtonDiv","Info","React","Component","Box","selectBox","props","row","col","className","this","boxClass","id","onClick","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","handleSelect","evt","gridSize","ButtonToolbar","display","justifyContent","playButton","pauseButton","clear","slow","fast","seed","DropdownButton","title","onSelect","flexDirection","alignItems","Dropdown","Item","eventKey","margin","arrayClone","arr","JSON","parse","stringify","Main","playState","gridCopy","state","setState","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","console","log","grid","Array","fill","map","generation","size","g","g2","count","seedState","borderTop","height","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8fa0ce5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport styled from \"styled-components\";\nimport { Dropdown, DropdownButton, ButtonToolbar } from 'react-bootstrap';\n// import Button from '@material-ui/core/Button';\n\n\nimport '../../index.css';\n\nconst BodyDiv = styled.div`\ndisplay: flex;\n${'' /* flex-direction: collumn; */}\n${'' /* justify-content: center; */}\n\n${'' /* border: 1px solid black; */}\nheight: 99vh;\nmargin: 5px 20px 0 20px;\n`\nconst HeaderDiv = styled.div`\ndisplay: flex;\njustify-content: center;\n\npadding:10px;\n${'' /* background-color: red; */}\n${'' /* border: 1px solid blue; */}\n// margin-left: 10px;\n// margin-right: 10px;\n`\nconst Title = styled.div`\n${'' /* justify-content: collumn; */}\n${'' /* border: 1px solid red; */}\n`\nconst ButtonDiv = styled.div`\n${'' /* height: 10vh; */}\ndisplay: flex;\n${'' /* border: 1px solid green; */}\nwidth:50%\n`\nclass Info extends React.Component{\n  render () {\n    return (\n      <div>\n        <div>\n        <h2>Who is John Conway?</h2>\n        </div>\n        <div>\n         <h3>John Horton Conway</h3>\n         <p>12/26/1937 - 04/11/2020</p> \n        </div>\n        <div>\n          <p> John Conway was an English mathematician.</p>\n          <p> He was was active in a multitude of diferrent theories, such as, finite groups, knot theory, number theory, combinatorial game theory and coding theory.</p>\n          <p> However, he was mostly known for his invention of the cellular automaton known as \"The Game of Life\"</p>\n        </div>\n        <div>\n          <h3> What is \"The Game of Life?\"</h3>\n          <div>\n            <p>The game of life is a cellular automaton ( A collection of \"colored\" cells on a grid of specified shape that evolves through a number of discrete time steps according to a set of rules based on the states of neighboring cells.)</p>\n          </div>\n          <div>\n          <h4>The rules of \"The Game of Life\":</h4>\n          <p>#1- Any live cell with fewer than two live neighbors dies (underpopulation). </p>\n          <p>#2- Any live cell with or three live neighnors live on to the next generation.</p>\n          <p>#3- Any live cell with more than thee live neighbors dies (overpopulation).</p>\n          <p>#4- Any dead cell with exactly three live neighbors becomes  live cell (reproduction).</p>\n          </div>\n          <h4>How can Conway's \"Game of Life\" be useful in real life?</h4>\n          <p>It can help visualize how human or animal groups themselves rotate through environments or migrate through them in search of more resources.</p>\n        </div>\n        <h3>Play the game below</h3>\n      </div>\n    )\n  }\n}\n// Create the box component(cells)\nclass Box extends React.Component {\n    // create a function that allows cells to be turned oon or off by clicking them\n    selectBox = () => {\n      this.props.selectBox(this.props.row, this.props.col)\n    }\n   //create a render function that displays the cells\n    render () {\n      return (\n        <div \n          className={this.props.boxClass}\n          id={this.props.id}\n          onClick={this.selectBox}\n        />\n      )\n    }\n  }\n\n\n  // Create a grid that maps out the cells in columns and rows \n  class Grid extends React.Component {\n    render() {\n      //Define the grid\n      const width = this.props.cols * 14\n      var rowsArr = []\n      var boxClass = \"\";\n      //Iterate through the rows\n      for (var i = 0; i < this.props.rows; i++) {\n        //Iterate through the columns\n        for (var j = 0; j < this.props.cols; j++) {\n          let boxId = i + \"_\" + j;\n          //Determine if the cells are alive or dead \n          boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\"\n\n          //Add the cells to aan array\n          rowsArr.push(\n            <Box \n              boxClass={boxClass}\n              key={boxId}\n              boxId={boxId}\n              row={i}\n              col={j}\n              selectBox={this.props.selectBox}\n            />\n          );\n        }\n      }\n      //Display the array in a grid\n      return (\n        <div className=\"grid\" style={{width: width}}>\n          {rowsArr}\n        </div>\n      );\n    }\n  }\n\n  //Create functional buttons\n  class Buttons extends React.Component{\n    //Grid size button function\n    handleSelect = (evt) => {\n      this.props.gridSize(evt)\n    }\n\n      render() {\n          return (\n            //create and render the buttons\n          <>\n\t\t\t\t<ButtonToolbar style={{\n          display: 'flex',\n          width: \"100%\",\n          justifyContent: \"space-evenly\",\n          // border: '1px red solid',\n        }}\n        >\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.playButton}>\n\t\t\t\t\t\tPlay\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.pauseButton}>\n\t\t\t\t\t  Pause\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.clear}>\n\t\t\t\t\t  Clear\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.slow}>\n\t\t\t\t\t  Slow\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.fast}>\n\t\t\t\t\t  Fast\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.props.seed}>\n\t\t\t\t\t  Seed\n\t\t\t\t\t</button>\n          \n  <DropdownButton \n   //grid size dropdown buttons\n  title=\"Grid Size\"\n  id=\"size-menu\"\n  onSelect={this.handleSelect}\n  >\n  \n  <div \n  style={{\n    // border: '1px red solid',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }}\n  >\n  \n  <Dropdown.Item eventKey='1' style={{\n    margin: '2px'\n  }}\n  ><button className=\"btn btn-primary\">20X10</button ></Dropdown.Item>\n  <Dropdown.Item eventKey='2'\n  style={{\n    margin: '2px'\n  }}\n  ><button className=\"btn btn-primary\">50x30</button></Dropdown.Item>\n  <Dropdown.Item eventKey='3'\n  style={{\n    margin: '2px'\n  }}\n  ><button className=\"btn btn-primary\">70x50</button></Dropdown.Item>\n  </div>\n  </DropdownButton>\n  </ButtonToolbar>\n  \n</>\n        )\n      }\n  }\n\n\n//render the  app\nclass Main extends React.Component {\n  //cunstruct the base defaults\n    constructor() {\n        super();\n        this.speed = 100;\n        this.rows = 30;\n        this.cols = 50;\n        //boolean for preventing the box select from triggering while the game is running\n        this.playState = false;\n        this.seedState = false;\n        this.state = {\n          generation: 0,\n          gridFull: Array(this.rows).fill().map(() => Array(this.col).fill(false))\n        }\n    }\n    // select box helper onclick function\n    selectBox = (row, col) => {\n      //does not trigger if playstate true\n      if (this.playState !== true) {\n        let gridCopy = arrayClone(this.state.gridFull);\n        gridCopy[row][col] = !gridCopy[row][col]\n        this.setState({\n          gridFull: gridCopy\n        });\n      }\n      }\n      //seed onClick helper function\n      seed = () => {\n        //does not trigger if playstate true\n        if (this.playState !== true) {\n        //add the seed to be debuffered\n        let gridCopy = arrayClone(this.state.gridFull);\n        for (let i = 0; i < this.rows; i++) {\n          for (let j = 0; j < this.cols; j++) {\n            if (Math.floor(Math.random() * 4) === 1) {\n              gridCopy[i][j] = true;\n            \n           }\n          }\n        }\n        //sets the seeded grid state\n        this.setState({\n          gridFull: gridCopy\n        });\n        }\n    }\n\n      //Button onClick helper functions\n      playButton = () => {\n        // sets the play state\n        this.playState = true;\n        clearInterval(this.intervalId);\n        this.intervalId = setInterval(this.play, this.speed);\n        console.log(this.playState);\n      }\n    \n      pauseButton = () => {\n        // sets the play state\n        this.playState = false;\n        clearInterval(this.intervalId);\n        console.log(this.playState);\n      }\n    \n      slow = () => {\n        this.speed = 1000;\n        // this.playButton();\n      }  \n      fast = () => {\n        this.speed = 10;\n        // this.playButton();\n      }\n      clear = () => {\n        var grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n        this.setState({\n          gridFull: grid,\n          generation: 0\n        });\n      }\n\n      gridSize = (size) => {\n        switch (size) {\n          case \"1\":\n            this.cols = 20;\n            this.rows = 10;\n          break;\n          case \"2\":\n            this.cols = 50;\n            this.rows = 30;\n          break;\n          case \"3\":\n            this.cols = 70;\n            this.rows = 50;\n          break;\n          default:\n            this.cols = 70;\n            this.rows = 50;\n        }\n        this.clear();\n      }\n    \n        play = () => {\n          let g = this.state.gridFull;\n          let g2 = arrayClone(this.state.gridFull);\n      \n          for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n              let count = 0;\n              if (i > 0) if (g[i - 1][j]) count++;\n              if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n              if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n              if (j < this.cols - 1) if (g[i][j + 1]) count++;\n              if (j > 0) if (g[i][j - 1]) count++;\n              if (i < this.rows - 1) if (g[i + 1][j]) count++;\n              if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n              if (i < this.rows - 1 && j < this.cols - 1) if (g[i + 1][j + 1]) count++;\n              if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n              if (!g[i][j] && count === 3) g2[i][j] = true;\n            }\n          }\n          this.setState({\n            gridFull: g2,\n            generation: this.state.generation + 1\n          });\n      \n      }\n    \n      // componentDidMount() {\n      //   this.seed();\n      //   // this.playButton();\n      // }\n\nrender () {\n    return (\n        <BodyDiv style={{\n            flexDirection: 'column',\n            alignItems: \"center\"\n\n        }}>\n        <HeaderDiv>\n        <Title>\n            <h1>\n                Conway's Game Of Life\n            </h1>\n            <p>By: John Rossi</p>\n        </Title>\n        </HeaderDiv>\n        <Info/>\n        <ButtonDiv\n        style={{\n            flexDirection: \"row\",\n            justifyContent: \"space-around\"\n        }}\n        >\n            <Buttons \n            playButton= {this.playButton}\n            pauseButton={this.pauseButton}\n            slow={this.slow}\n            fast={this.fast}\n            clear={this.clear}\n            seed={this.seed}\n            gridSize={this.gridSize}\n            />\n        </ButtonDiv>\n        <h2> Generations: {this.state.generation}</h2>\n        <Grid\n        gridFull={this.state.gridFull}\n        rows={this.rows}\n        cols={this.cols}\n        selectBox={this.selectBox}\n\n        />\n      <footer style ={{\n        borderTop: '1px solid black',\n        height: '30px',\n        width: '100%',\n        marginTop: '10px'\n      }}>\n        \n      </footer>\n        </BodyDiv>\n    );\n}\n}\n//Debuffered array\nfunction arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr))\n  }\n\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}